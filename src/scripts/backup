#!/usr/bin/env php
<?php
/**
 * phpillow CouchDB backend
 *
 * This file is part of phpillow.
 *
 * phpillow is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; version 3 of the License.
 *
 * phpillow is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with phpillow; if not, write to the Free Software Foundation, Inc., 51
 * Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * @package Core
 * @version $Revision$
 * @license http://www.gnu.org/licenses/lgpl-3.0.txt LGPL
 */

// Parse options, using getopt(), which actually works since PHP 5.3
$options = getopt(
    'b::i::d::hor',
    array(
        'backup::',
        'import::',
        'database::',
        'help',
        'overwrite',
        'recreate',
    )
);

var_dump( $options );

// Display help message, if requested, or no options could be parsed.
if ( !count( $options ) ||
     isset( $options['h'] ) || 
     isset( $options['help'] ) )
{
    echo <<<EOHELP
PHPillow CouchDB backup tool
Licensed under LGPL 3 (http://www.gnu.org/licenses/lgpl-3.0.txt)

Usage: ${argv[0]} [-dhor] --import=<file> | --backup=<file>

-b / --backup       Database backup destination file
-i / --import       Name of file to import

-d / --database     URL used to connect to couchdb. Defaults to:
                    http://localhost:5984/ You may optionally specify username,
                    password and a special database to backup. If none is
                    specified all databases will be backed up.

-h / --help         Show this help message

Import options
--------------

-o / --overwrite    Overwrite existing documents, default: Off.
-r / --recreate     Purge and recreate databases, default: Off.

Export options
--------------

none


EOHELP;
    exit( 0 );
}

// Initialize autoload environment for PHPillow
function __autoload( $class )
{
    static $autoloads = null;
    
    if ( $autoloads === null )
    {
        $autoloads = include __DIR__ . '/../classes/autoload.php';
    }

    if ( strpos( $class, 'phpillow' ) === 0 )
    {
        require __DIR__ . '/../' . $autoloads[$class];
    }
}

// Parse CouchDB connection string
$database = ( isset( $options['d'] ) ? parseDsn( $options['d'] ) :
                ( isset( $options['database'] ) ? parseDsn( $options['database'] ) :
                    parseDsn( 'http://localhost:5984/' )
                )
);

// Connect to database
phpillowConnection::createInstance( $database['host'], $database['port'] );
$conn = phpillowConnection::getInstance();

// Determine actual action to perform
switch ( true )
{
    case isset( $options['i'] ) ||
         isset( $options['import'] ):
        // Import backup file to database.
        if ( ( ( $file = isset( $options['i'] ) ? $options['i'] : $options['import'] ) == false ) ||
             ( !is_readable( $file ) ) ||
             ( !is_file( $file ) ) )
        {
            echo "File '$file' not readable, or not a file.\n";
            exit( 1 );
        }

        echo "Importing file '$file'.";

        $fp = fopen( $file, 'r' );
        $database = null;
        while ( $line = fgets( $fp ) )
        {
            if ( $line[0] === 's' )
            {
                echo "\n";
                $database = base64_decode( substr( $line, 2 ) );
                echo "- Import database '$database': ";

                // Remove database before importing again.
                if ( isset( $options['r'] ) || isset( $options['recreate'] ) )
                {
                    $conn->delete( '/' . $database );
                    $conn->put( '/' . $database );
                }
            }
            elseif ( ( $database !== null ) &&
                     ( $line[0] === 'd' ) )
            {
                $line = substr( $line, 2 );
                
                // Find colon, which seperates the ID from the body, and
                // extract the data from the line.
                $colonPos = strpos( $line, ':' );
                $id       = base64_decode( substr( $line, 0, $colonPos ) );
                $data     = base64_decode( substr( $line, $colonPos + 1 ) );

                // Post documents to database
                try
                {
                    $conn->put( '/' . $database . '/' . $id, $data );
                    echo '.';
                }
                catch ( phpillowResponseErrorException $e )
                {
                    echo 'e';
                }
            }
            else
            {
                echo "[Error]: Invalid line.\n";
            }
        }
        break;

    case isset( $options['b'] ) ||
         isset( $options['backup'] ):
        // Import backup file to database.
        $file = isset( $options['b'] ) ? $options['b'] : $options['backup'];

        // If the option has been set, but no filename has been provided, we
        // create a random one.
        $file = empty( $file ) ? tempnam( './', 'backup_' ) : $file;
        $fp = fopen( $file, 'w' );

        echo "Backup database to file '$file'.\n";

        if ( strlen( $database['path'] ) > 1 )
        {
            $databases = array( substr( $database['path'], 1 ) );
        }
        else
        {
            // Fetch list of databases to create backup for, if none has been
            // specified.
            $databases = $conn->get( '/_all_dbs' )->data;
        }

        // Iterate over dabases and create backup
        foreach ( $databases as $database )
        {
            echo "- Backup database '$database': ";
            fwrite( $fp, 's:' . base64_encode( $database ) . "\n" );
            
            // Get list of documents from database
            $ids = $conn->get( '/' . $database . '/_all_docs' )->rows;
            foreach ( $ids as $document )
            {
                $data = $conn->get( '/' . $database . '/' . $document['id'] )->getFullDocument();
                unset( $data['_id'] );
                unset( $data['_rev'] );
                fwrite( $fp, 'd:' . base64_encode( $document['id'] ) . ':' . base64_encode( json_encode( $data ) ) . "\n" );
                echo '.';
            }

            echo "\n";
        }

        echo "\nBackup completed.\n";

        break;
}

/*
 * Utility functions
 */

/**
 * Parse CouchDB DSN
 * 
 * Parse the URL, which defines the database location. The function will return
 * an array, which at least contains the host, port and database string.
 * 
 * @param string $dsn 
 * @return array
 */
function parseDsn( $dsn )
{
    $defaultValues = array(
        'host' => '127.0.0.1',
        'port' => 5984,
        'path' => null,
    );

    $data = parse_url( (string) $dsn );

    // Apply default values, of they could not be extracted from the URL.
    foreach ( $defaultValues as $key => $value )
    {
        $data[$key] = isset( $data[$key] ) ? $data[$key] : $value;
    }

    return $data;
}

?>
